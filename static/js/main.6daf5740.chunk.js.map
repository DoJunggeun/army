{"version":3,"sources":["logo.svg","profile.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","react_default","a","createElement","className","App_Header","App_Body","App_Footer","Component","Header","style","flexDirection","src","require","height","width","fontSize","Body","RestDays","today","Date","start","end","getTime","toFixed","backgroundColor","App_Holiday","Holiday","marginTop","Footer","App_Plan","App_Days","Plan","justifyContent","href","color","textDecoration","fontWeight","flex","onClick","window","open","Days","alignItems","date","dist_default","diff","unit","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6daf5740.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/profile.632bd4b4.jpg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Moment from 'react-moment';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n\t\t<Body />\n\t\t<Footer />\n\t</div>\n    );\n  }\n}\n\nexport default App;\n\nclass Header extends Component {\n  render() {\n    return (\n        <div className=\"App-header\">\n\t\t\t<div className=\"myname\" style={{flexDirection:'row'}}>\n\t\t\t\t<img src={ require('./profile.jpg') } style={{height:130, width:130}}/>\n\t\t\t</div>\n\t\t\t\t<div style={{flexDirection:'row'}}>\n\t\t\t\t\t\t<div style={{fontSize:28}}>일병 <strong>도정근</strong></div>\n\t\t\t\t\t\t<div style={{fontSize:14}}><br/>입대일 2020.02.24<br/>전역일 2021.09.02</div>\n\t\t\t\t</div>\n\n        </div>\n    );\n  }\n}\n\nclass Body extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App-body\">\n\t\t\t\t<span className=\"Text-body\">전역 D-{RestDays()}</span>\n\t\t\t\t<span>{RestPercent()}%</span>\n\t\t\t\t<div style={{height:10, width:320, backgroundColor:'white'}}>\n\t\t\t\t\t<div style={{height:10, width:30, backgroundColor:'lightgreen'}}>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<Holiday />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Holiday extends Component {\n\trender(){\n\t\treturn (\n\t\t\t\t<div className=\"holiday\">\n\t\t\t\t\t<div style={{width:'50%'}}>다음 출타<br/>2020.08.08 외출</div>\n\t\t\t\t\t<div style={{width:'50%', marginTop:10}}>다음 출타 with 예린<br/>2020.08.08 외출</div>\n\t\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Footer extends Component {\n\trender() {\n\t\tconst date = new Date();\n\t\treturn (\n\t\t\t<div className=\"App-footer\">\n\t\t\t\t<Plan />\n\t\t\t\t<Days />\n\t\t\t</div>\t\t\n\t\t)\n\t}\n}\n\nclass Plan extends Component {\n\trender() {\n\t\treturn (\n\t\t<div style={{width:'100%', justifyContent:'center'}}>\n\t\t\t<a href=\"https://www.notion.so/dojunggeun/45bb492763b446ef901d16d52a6425fb\" style={{color:'rgb(70,61,62)',textDecoration:'none', fontWeight:900, flex:1}}>출타 계획 보기</a>\n\t\t\t<button onClick={() => window.open('https://www.notion.so/dojunggeun/45bb492763b446ef901d16d52a6425fb')} style={{marginTop:15}}>출타 계획 보기</button>\n\t\t</div>\n\t\t)\n\t}\n}\n\nclass Days extends Component {\n\trender() {\n\t\treturn (\n\t\t<div style={{flexDirection:'column', width:'100%', alignItems:'center'}}>\n\t\t\t<p>전체 복무일 : 557</p>\n\t\t\t<p style={{marginTop:5}}>현재 복무일 : {UntilNow()}</p>\n\t\t\t<p style={{marginTop:5}}>남은 복무일 : {RestDays()}</p>\t\t\t\t\n\t\t</div>\n\t\t)\n\t}\n}\n\n\n\nfunction UntilNow() {\n\tconst date = new Date();\n\treturn <Moment diff=\"2020-02-23T14:00\" unit=\"days\">{date}</Moment>;\n}\nfunction RestDays() {\n\tconst date = new Date();\n\treturn <Moment diff={date} unit=\"days\">2021-09-03T00:00</Moment>\n}\nfunction RestPercent() {\n\tconst today = new Date();\n\tconst start = new Date('2020-02-24T00:00:00');\n\tconst end = new Date('2021-09-03T00:00:00');\n\tlet per = ((today.getTime()-start.getTime())/(end.getTime()-start.getTime())*100).toFixed(2);\n\treturn per\n}","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}